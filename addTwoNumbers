/*

You are given two linked lists representing two non-negative numbers.
The digits are stored in reverse order and each of their nodes contain a single digit.
Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        ListNode *head = new ListNode(0);
        ListNode *p = head;
        int carry = 0;
        while(1) {
            int v1=0, v2=0;
            if (l1!=NULL) {
                v1=l1->val;
                l1=l1->next;
            }
            if (l2!=NULL) {
                v2=l2->val;
                l2=l2->next;
            }
            p->val += v1+v2;
            carry = p->val / 10;
            p->val %= 10;
            if (l1!=NULL || l2!=NULL || carry) {
                p->next = new ListNode(carry);
                p=p->next;
            }
            else break;
        }
        return head;
    }
};
