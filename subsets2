/*

Given a collection of integers that might contain duplicates, S, return all possible subsets.

Note:

Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If S = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]

*/

void helper(vector<vector<int> > &out, vector<int> &tmp, vector<int> &S, int idx) {
    out.push_back(tmp);
    for (int i=idx; i<S.size(); i++) {
        if (i==idx || S[i]!=S[i-1]) {
            tmp.push_back(S[i]);
            helper(out, tmp, S, i+1);
            tmp.pop_back();
        }
    }
}

class Solution {
public:
    vector<vector<int> > subsetsWithDup(vector<int> &S) {   

        vector<vector<int> > out;
        vector<int> tmp;
        sort(S.begin(), S.end());
        helper(out, tmp, S, 0);
        return out;
    }
};
