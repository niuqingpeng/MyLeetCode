/*

Merge k sorted linked lists and return it as one sorted list.
Analyze and describe its complexity.

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
  
ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
    if (l1==NULL && l2==NULL) return NULL;
    if (l1==NULL) return l2;
    if (l2==NULL) return l1;
    if (l1->val <= l2->val) {
        l1->next = mergeTwoLists(l1->next,l2);
        return l1;
    }
    else {
        l2->next = mergeTwoLists(l1,l2->next);
        return l2;
    }
}
    
class Solution {
public:
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        ListNode *out = NULL;
        int k=0;
        while (k!=lists.size()) {
            out = mergeTwoLists(out,lists[k]);
            k++;
        }
        return out;
    }
};
