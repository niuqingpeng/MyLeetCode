/*

Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},

   1
    \
     2
    /
   3
return [1,3,2].

Note: Recursive solution is trivial, could you do it iteratively?

*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */


#if 0 // recursive

void inorder(TreeNode *root, vector<int> &out) {
    if (root==NULL) return;
    inorder(root->left,out);
    out.push_back(root->val);
    inorder(root->right,out);
}

#else // iterative

void inorder(TreeNode *root, vector<int> &out) {
    stack<TreeNode *> s;
    TreeNode *curr = root;
    bool done = false;
    while (!done) {
        if (curr!=NULL) {
            s.push(curr);
            curr = curr->left;
        }
        else {
            if (s.empty()) done = true;
            else {
                curr = s.top();
                s.pop();
                out.push_back(curr->val);
                curr = curr->right;
            }
        }
    }
}

#endif


class Solution {
public:
    vector<int> inorderTraversal(TreeNode *root) {
        vector<int> out;
        inorder(root,out);
        return out;
    }
};
