/*

Given a singly linked list where elements are sorted in ascending order, 
convert it to a height balanced BST.

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

TreeNode* build(ListNode *&head, int l, int r) {
    if (l > r) return NULL;
    int mid = (l+r)/2;
    TreeNode *left = build(head, l, mid-1);
    TreeNode *node = new TreeNode(head->val);
    node->left = left;
    head = head->next;
    node->right = build(head, mid+1, r);
    return node;
}  
 
class Solution {
public:
    TreeNode *sortedListToBST(ListNode *head) {
        int n=0;
        ListNode *p = head;
        while(p!=NULL) {
            p = p->next;
            n++;
        }
        return build(head,0,n-1);
    }
};

