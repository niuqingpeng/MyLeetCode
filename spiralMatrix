/*

Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example, given the following matrix:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].

*/

vector<int> spiralOrder(vector<vector<int> > &matrix) {
    vector<int> out;
    int x0=0, y0=0;
    int y1 = matrix.size()-1;
    if (y1<0) return out;
    int x1 = matrix[0].size()-1;
    if (x1<0) return out;
    typedef enum {LF,RT,UP,DN} DIRECTION;
    DIRECTION d = RT;
    while (x1>=x0 && y1>=y0) {
        if (d==RT) {
            for (int i=x0; i<=x1; i++) out.push_back(matrix[y0][i]);
            y0++;
            d=DN;
        }
        else if (d==DN) {
            for (int i=y0; i<=y1; i++) out.push_back(matrix[i][x1]);
            x1--;
            d=LF;
        }
        else if (d==LF) {
            for (int i=x1; i>=x0; i--) out.push_back(matrix[y1][i]);
            y1--;
            d=UP;
        }
        else if (d==UP) {
            for (int i=y1; i>=y0; i--) out.push_back(matrix[i][x0]);
            x0++;
            d=RT;
        }
    }
    return out;
}
