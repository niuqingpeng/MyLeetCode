/*

Given a linked list, swap every two adjacent nodes and return its head.

For example,
 Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space.
You may not modify the values in the list, only nodes itself can be changed.

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *swapPairs(ListNode *head) {
        
        if (head==NULL) return NULL;
        ListNode *n1 = head;
        ListNode *n2;
        ListNode *prev = new ListNode(0);
        prev->next = head;
        head = prev;
        while (1) {
            if (n1==NULL) break;
            if (n1->next==NULL) break;
            n2 = n1->next;
            ListNode *tail = n2->next;
            prev->next = n2;
            n2->next = n1;
            n1->next = tail;
            prev = n1;
            n1 = tail;
        }
        return head->next;        
    }
};
