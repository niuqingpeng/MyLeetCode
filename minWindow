/*

Given a string S and a string T, find the minimum window in S 
which will contain all the characters in T in complexity O(n).

For example,
S = "ADOBECODEBANC"
T = "ABC"

Minimum window is "BANC".

Note:
If there is no such window in S that covers all characters in T, 
return the emtpy string "".

If there are multiple such windows, you are guaranteed that 
there will always be only one unique minimum window in S.

*/

class Solution {  
public:  
    string minWindow(string S, string T) {
        int nS = S.size();
        int nT = T.size();
        vector<int> expect(256,0);
        vector<int> appear(256,0);
        for (int i=0; i<nT; i++) expect[T[i]]++;
        int minBegin, minEnd, minLength=nS+1;
        int count = 0;
        for (int begin=0, end=0; end<nS; end++) {
            char ch = S[end];
            if (expect[ch]==0) continue;
            appear[ch]++;
            if (appear[ch]<=expect[ch]) count++;
            if (count==nT) { // find end
                char ch2 = S[begin];
                while (expect[ch2] == 0
                || appear[ch2]>expect[ch2]) {
                    if (appear[ch2]>expect[ch2]) appear[ch2]--;
                    begin++;
                    ch2 = S[begin];
                }
                int length = end - begin + 1;
                if (length < minLength) {
                    minBegin = begin;
                    minEnd = end;
                    minLength = length;
                }  
            }  
        }            
        return minLength <= nS ? S.substr(minBegin, minEnd-minBegin+1) : "";  
    }  
};  
