/*

Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string 
by deleting some (can be none) of the characters without disturbing 
the relative positions of the remaining characters. 
(ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.


*/

class Solution {
public:
    int numDistinct(string S, string T) {
        if (S.size()<T.size()) return 0;
        vector<int> match(S.size()+1,0);
        match[0] = 1;
        for (int i=1; i<=S.size(); i++) {
            for (int j=T.size(); j>=1; j--) {
                if(S[i-1] == T[j-1])
                    match[j]+= match[j-1];
            }
        }
        return match[T.size()];
    }
};
