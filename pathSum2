/*

Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
        
return

[
   [5,4,11,2],
   [5,8,4,5]
]

*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
void dfs(vector< vector<int> > &out, vector<int> &path, TreeNode *n, int sum) {
        if (n==NULL) return;
        path.push_back(n->val);
        if (n->left==NULL && n->right==NULL && n->val==sum) {
            out.push_back(path);
        }
        else {
            dfs(out,path,n->left, sum-n->val);
            dfs(out,path,n->right,sum-n->val);
        }
        path.pop_back(); // need this because pass-by-reference
}
 
class Solution {
public:
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
        vector< vector<int> > out;
        vector<int> path;
        dfs(out,path,root,sum);
        return out;
    }
};
