/*

Given a binary tree, return the bottom-up level order traversal of its nodes' values. 
(ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7
   
return its bottom-up level order traversal as:

[
  [15,7]
  [9,20],
  [3],
]  

*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

void traverse(vector<vector<int>> &out, TreeNode *node, int level) {
    if (node==NULL) return;
    if (level > out.size()) {
        vector<int> tmp;
        out.push_back(tmp);
    }
    out[level-1].push_back(node->val);
    traverse(out,node->left,level+1);
    traverse(out,node->right,level+1);
}


class Solution {
public:
    vector<vector<int> > levelOrderBottom(TreeNode *root) {
        vector<vector<int>> out;
        traverse(out,root,1);
        std::reverse(out.begin(),out.end());
        return out;
    }
};


