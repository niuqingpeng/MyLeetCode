/*

Given a linked list and a value x, partition it such that 
all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *partition(ListNode *head, int x) {
        ListNode *l1 = new ListNode(x); // less than x
        ListNode *l2 = new ListNode(x); // greater and equal than x
        ListNode *h1 = l1; // head of l1
        ListNode *h2 = l2; // head of l2
        ListNode *curr = head;
        while (curr!=NULL) {
            ListNode *next = curr->next;
            if (curr->val < x) {
                l1->next=curr;
                curr->next=NULL;
                l1=l1->next;
            }
            else {
                l2->next=curr;
                curr->next=NULL;
                l2=l2->next;
            }
            curr = next;
        }
        l2 = h2->next;
        delete h2;
        l1->next = l2;
        l1 = h1->next;
        delete h1;
        return l1;
    }
};
