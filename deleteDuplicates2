/*

Given a sorted linked list, delete all nodes that have duplicate numbers,
leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *deleteDuplicates(ListNode *head) {
        if (head==NULL) return NULL;

        ListNode *prev = new ListNode(0);
        prev->next = head;
        ListNode *curr = head;
        ListNode *next = head;
        head = prev;
        while (curr!=NULL) {
            next = curr->next;
            bool flag = false;
            while (next!=NULL && curr->val == next->val) {
                curr->next = next->next;
                delete next;
                next = curr->next;
                flag = true;
            }
            if (flag) {
                prev->next = curr->next;
                delete curr;
                curr = next;
            }
            else {
                curr = curr->next;
                prev = prev->next;
            }
        }
        curr = head;
        head = head->next;
        delete curr;
        return head;
    }
};
