/*

Write an efficient algorithm that searches for a value in an m x n matrix.
This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:
[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.

*/

bool search(vector<vector<int> > &mat, int num, int s1, int s2, int row, int col) {
    if (s1>s2) return false;
    int mid = s1 + (s2-s1)/2;
    int r = mid/col;
    int c = mid%col;
    if (num==mat[r][c]) return true;
    if (num>mat[r][c]) { 
        return search(mat, num, mid+1, s2, row, col);
    } else {
        return search(mat, num, s1, mid-1, row, col);
    }
}
    
class Solution {
public:
    bool searchMatrix(vector<vector<int> > &matrix, int target) {
        int x = matrix.size();
        if (x==0) {return false;}
        int y = matrix[0].size();
        int n = x*y;
        return search(matrix, target, 0,n-1,x,y);
    }
};
