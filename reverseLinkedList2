/*

Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 <= m <= n <= length of list.

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
ListNode *reverse(ListNode *p1, int num, ListNode *p2) {
    ListNode * tmp;
    for (int i=0; i<num; i++) {
        tmp = p1->next;
        p1->next = p2;
        p2 = p1;
        p1 = tmp;
    }
    return p2;
} 

#if 0 // iteratively reverse a linked list
Node *reverse(Node *head) {
    Node *temp;
    Node *prev = NULL;
    while(ptr != NULL) {
        temp = head->next;
        head->next = prev;
        prev = head;
        head = temp;
    }
    return prev;
}
#endif
 
class Solution {
public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        
        ListNode *dummy = new ListNode(0);
        dummy->next = head;
        ListNode *p1 = dummy, *p2 = dummy, *p3 = dummy;
        for (int i=0; i<m-1; i++) p1 = p1->next;
        for (int i=0; i<m; i++)   p2 = p2->next;
        for (int i=0; i<n+1; i++) p3 = p3->next;
        p1->next = reverse(p2,n-m+1,p3);
        head = dummy->next;
        delete dummy;
        return head;
    }
};
