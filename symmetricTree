/*

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3

But the following is not:

    1
   / \
  2   2
   \   \
   3    3

Note:
Bonus points if you could solve it both recursively and iteratively.

*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

#if 1 // iterative

class Solution {
public:
    bool isSymmetric(TreeNode *root) {
        if (root==NULL) return true;
        queue<TreeNode*> LF, RT;
        LF.push(root->left);
        RT.push(root->right);
        while (!LF.empty() || !RT.empty()) {
            TreeNode* l = LF.front(); LF.pop();
            TreeNode* r = RT.front(); RT.pop();
            if ((l==NULL) && (r==NULL)) continue;
            if ((l==NULL) || (r==NULL)) return false;
            if (l->val!=r->val) return false;
            else {
                LF.push(l->left);
                RT.push(r->right);
                LF.push(l->right);
                RT.push(r->left);
            }
        }
        if (LF.empty() && RT.empty()) return true;
        return false;
    }
};

#else // recursive

bool isMirror(TreeNode *x, TreeNode* y) {
    if ( (x==NULL) && (y==NULL) ) return true;
    if ( (x==NULL) || (y==NULL) ) return false;
    if (x->val != y->val) return false;
    return isMirror(x->left,y->right) && isMirror(x->right,y->left);
}

class Solution {
public:
    bool isSymmetric(TreeNode *root) {
        if (root==NULL) return true;
        return isMirror(root->left,root->right);        
    }
};

#endif
